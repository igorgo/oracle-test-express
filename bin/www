#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var db = require('../db/database');
var debug = require('debug')('oracle-test-express:server');
var http = require('http');
fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var fs, configFile;

configFile = 'config.json';

var config = JSON.parse(
    fs.readFileSync(configFile)
);

//var port = normalizePort(process.env.PORT || '3000');
var port = normalizePort(config.port || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);


db.createPool({
    user: config.username,
    password: config.password,
    connectString: config.connectString
},
    config.schema)
    .then (function() {
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch(function(err) {
        console.error('Error occurred creating database connection pool', err);
        console.log('Exiting process');
        process.exit(0);
    });


/**
 * Listen on provided port, on all network interfaces.
 */

/*server.listen(port);
server.on('error', onError);
server.on('listening', onListening);*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}




